// generated by Fast Light User Interface Designer (fluid) version 1.0109

#ifndef myWindow_h
#define myWindow_h
#include <FL/Fl.H>
#include "myWinApp.h"
#include <FL/Fl_Double_Window.H>
extern Fl_Double_Window *pMain_win;
#include <FL/Fl_Menu_Bar.H>
extern Fl_Menu_Bar *pMain_menu;
extern MyGlWindow *pRender_glWin;
#include <FL/Fl_Group.H>
extern Fl_Group *pEOChange_group;
#include <FL/Fl_Round_Button.H>
extern void SetEyes(Fl_Round_Button*, void*);
extern Fl_Round_Button *pEyes_buttn;
extern void SetObj(Fl_Round_Button*, void*);
extern Fl_Round_Button *pObj_buttn;
extern Fl_Group *pProjChange_group;
extern void SetParal(Fl_Round_Button*, void*);
extern Fl_Round_Button *pParal_buttn;
extern void SetPersp(Fl_Round_Button*, void*);
extern Fl_Round_Button *pPersp_buttn;
#include <FL/Fl_Check_Button.H>
extern void SetCoord(Fl_Check_Button*, void*);
extern Fl_Check_Button *pCoord_buttn;
extern Fl_Group *pRenderingChange_group;
extern void SetWire(Fl_Round_Button*, void*);
extern Fl_Round_Button *pWire_buttn;
extern void SetFlatShading(Fl_Round_Button*, void*);
extern Fl_Round_Button *pFlatSh_buttn;
extern void SetGouraudShading(Fl_Round_Button*, void*);
extern Fl_Round_Button *pGouraudSh_buttn;
extern void SetPhongShading(Fl_Round_Button*, void*);
extern Fl_Round_Button *pPhongSh_buttn;
extern Fl_Round_Button *pVolume_buttn;
#include <FL/Fl_Value_Slider.H>
extern void ChangeDisAtt(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pDisAtt_valScl;
extern void ChangeSmpNum(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pSmpNum_valScl;
extern void ChangeBriScl(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pBriScl_valScl;
extern void ChangeOpaScl(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pOpaScl_valScl;
extern Fl_Group *pSptMsk_group;
extern void ChangeMskThrd(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pMskThrd_valScl;
#include <FL/Fl_Button.H>
extern void Relight(Fl_Button*, void*);
extern Fl_Button *pRelit_bttn;
extern Fl_Group *pAmip_group;
extern void SetMIP(Fl_Check_Button*, void*);
extern Fl_Check_Button *pMIP_bttn;
extern void ChangeOccScl(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pOccScl_valScl;
extern Fl_Group *pXClip_group;
extern void SetXClipping(Fl_Check_Button*, void*);
extern Fl_Check_Button *pXClip_bttn;
extern void SetXFront(Fl_Check_Button*, void*);
extern Fl_Check_Button *pXFront_bttn;
extern void ChangeXPlane(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pXPlanel_valScl;
extern Fl_Group *pYClip_group;
extern void SetYClipping(Fl_Check_Button*, void*);
extern Fl_Check_Button *pYClip_bttn;
extern void SetYFront(Fl_Check_Button*, void*);
extern Fl_Check_Button *pYFront_bttn;
extern void ChangeYPlane(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pYPlanel_valScl;
extern Fl_Group *pZClip_group;
extern void SetZClipping(Fl_Check_Button*, void*);
extern Fl_Check_Button *pZClip_bttn;
extern void SetZFront(Fl_Check_Button*, void*);
extern Fl_Check_Button *pZFront_bttn;
extern void ChangeZPlane(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pZPlanel_valScl;
extern void RunStereo(Fl_Button*, void*);
extern Fl_Button *pStereo_bttn;
extern Fl_Group *pXtereo_group;
extern void SetDivShow(Fl_Check_Button*, void*);
extern Fl_Check_Button *pDivResult_bttn;
extern void SetRandDis(Fl_Check_Button*, void*);
extern Fl_Check_Button *pRndDist_bttn;
extern void ChangeDivThrd(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pDivion_valScl;
extern void SetBrightness(Fl_Check_Button*, void*);
extern Fl_Check_Button *pLighting_bttn;
extern void ChangeBrightness(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pGamma_valScl;
extern void SetContrast(Fl_Check_Button*, void*);
extern Fl_Check_Button *pContour_bttn;
extern void ChangeContrast(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pContour_valScl;
extern void SetDim(Fl_Check_Button*, void*);
extern Fl_Check_Button *pDim_bttn;
extern void ChangeDim(Fl_Value_Slider*, void*);
extern Fl_Value_Slider *pDim_valScl;
extern void RunStFusion(Fl_Button*, void*);
extern Fl_Button *pStFusion_bttn;
extern void CountFps(Fl_Check_Button*, void*);
extern Fl_Check_Button *pFps_buttn;
Fl_Double_Window* make_window();
#endif
