// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "myWindow.h"

Fl_Double_Window *pMain_win=(Fl_Double_Window *)0;

Fl_Menu_Bar *pMain_menu=(Fl_Menu_Bar *)0;

MyGlWindow *pRender_glWin=(MyGlWindow *)0;

Fl_Group *pEOChange_group=(Fl_Group *)0;

Fl_Round_Button *pEyes_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pObj_buttn=(Fl_Round_Button *)0;

Fl_Group *pProjChange_group=(Fl_Group *)0;

Fl_Round_Button *pParal_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pPersp_buttn=(Fl_Round_Button *)0;

Fl_Check_Button *pCoord_buttn=(Fl_Check_Button *)0;

Fl_Group *pRenderingChange_group=(Fl_Group *)0;

Fl_Round_Button *pWire_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pFlatSh_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pGouraudSh_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pPhongSh_buttn=(Fl_Round_Button *)0;

Fl_Round_Button *pVolume_buttn=(Fl_Round_Button *)0;

Fl_Value_Slider *pDisAtt_valScl=(Fl_Value_Slider *)0;

Fl_Value_Slider *pSmpNum_valScl=(Fl_Value_Slider *)0;

Fl_Value_Slider *pBriScl_valScl=(Fl_Value_Slider *)0;

Fl_Value_Slider *pOpaScl_valScl=(Fl_Value_Slider *)0;

Fl_Group *pSptMsk_group=(Fl_Group *)0;

Fl_Value_Slider *pMskThrd_valScl=(Fl_Value_Slider *)0;

Fl_Button *pRelit_bttn=(Fl_Button *)0;

Fl_Group *pAmip_group=(Fl_Group *)0;

Fl_Check_Button *pMIP_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pOccScl_valScl=(Fl_Value_Slider *)0;

Fl_Group *pXClip_group=(Fl_Group *)0;

Fl_Check_Button *pXClip_bttn=(Fl_Check_Button *)0;

Fl_Check_Button *pXFront_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pXPlanel_valScl=(Fl_Value_Slider *)0;

Fl_Group *pYClip_group=(Fl_Group *)0;

Fl_Check_Button *pYClip_bttn=(Fl_Check_Button *)0;

Fl_Check_Button *pYFront_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pYPlanel_valScl=(Fl_Value_Slider *)0;

Fl_Group *pZClip_group=(Fl_Group *)0;

Fl_Check_Button *pZClip_bttn=(Fl_Check_Button *)0;

Fl_Check_Button *pZFront_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pZPlanel_valScl=(Fl_Value_Slider *)0;

Fl_Button *pStereo_bttn=(Fl_Button *)0;

Fl_Group *pXtereo_group=(Fl_Group *)0;

Fl_Check_Button *pDivResult_bttn=(Fl_Check_Button *)0;

Fl_Check_Button *pRndDist_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pDivion_valScl=(Fl_Value_Slider *)0;

Fl_Check_Button *pLighting_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pGamma_valScl=(Fl_Value_Slider *)0;

Fl_Check_Button *pContour_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pContour_valScl=(Fl_Value_Slider *)0;

Fl_Check_Button *pDim_bttn=(Fl_Check_Button *)0;

Fl_Value_Slider *pDim_valScl=(Fl_Value_Slider *)0;

Fl_Button *pStFusion_bttn=(Fl_Button *)0;

Fl_Check_Button *pFps_buttn=(Fl_Check_Button *)0;

Fl_Double_Window* make_window() {
  { pMain_win = new Fl_Double_Window(1390, 769, "renderXman");
    { pMain_menu = new Fl_Menu_Bar(0, 0, 1390, 20);
    } // Fl_Menu_Bar* pMain_menu
    { pRender_glWin = new MyGlWindow(0, 20, 1020, 745);
      pRender_glWin->box(FL_NO_BOX);
      pRender_glWin->color(FL_BACKGROUND_COLOR);
      pRender_glWin->selection_color(FL_BACKGROUND_COLOR);
      pRender_glWin->labeltype(FL_NORMAL_LABEL);
      pRender_glWin->labelfont(0);
      pRender_glWin->labelsize(14);
      pRender_glWin->labelcolor(FL_FOREGROUND_COLOR);
      pRender_glWin->align(FL_ALIGN_TOP);
      pRender_glWin->when(FL_WHEN_RELEASE);
      pRender_glWin->end();
    } // MyGlWindow* pRender_glWin
    { pEOChange_group = new Fl_Group(1025, 135, 170, 50);
      pEOChange_group->box(FL_DOWN_BOX);
      { pEyes_buttn = new Fl_Round_Button(1030, 140, 64, 15, "eyes");
        pEyes_buttn->down_box(FL_ROUND_DOWN_BOX);
        pEyes_buttn->callback((Fl_Callback*)SetEyes, (void*)(pEOChange_group));
      } // Fl_Round_Button* pEyes_buttn
      { pObj_buttn = new Fl_Round_Button(1030, 160, 64, 15, "obj");
        pObj_buttn->down_box(FL_ROUND_DOWN_BOX);
        pObj_buttn->value(1);
        pObj_buttn->callback((Fl_Callback*)SetObj, (void*)(pEOChange_group));
      } // Fl_Round_Button* pObj_buttn
      pEOChange_group->end();
    } // Fl_Group* pEOChange_group
    { pProjChange_group = new Fl_Group(1025, 190, 170, 55);
      pProjChange_group->box(FL_DOWN_BOX);
      { pParal_buttn = new Fl_Round_Button(1030, 195, 64, 15, "parallel");
        pParal_buttn->down_box(FL_ROUND_DOWN_BOX);
        pParal_buttn->callback((Fl_Callback*)SetParal, (void*)(pProjChange_group));
      } // Fl_Round_Button* pParal_buttn
      { pPersp_buttn = new Fl_Round_Button(1030, 215, 64, 15, "perspective");
        pPersp_buttn->down_box(FL_ROUND_DOWN_BOX);
        pPersp_buttn->value(1);
        pPersp_buttn->callback((Fl_Callback*)SetPersp, (void*)(pProjChange_group));
      } // Fl_Round_Button* pPersp_buttn
      pProjChange_group->end();
    } // Fl_Group* pProjChange_group
    { pCoord_buttn = new Fl_Check_Button(1025, 250, 110, 15, "coordinate");
      pCoord_buttn->down_box(FL_DOWN_BOX);
      pCoord_buttn->callback((Fl_Callback*)SetCoord);
    } // Fl_Check_Button* pCoord_buttn
    { pRenderingChange_group = new Fl_Group(1025, 20, 170, 110);
      pRenderingChange_group->box(FL_DOWN_BOX);
      { pWire_buttn = new Fl_Round_Button(1030, 25, 64, 15, "wire");
        pWire_buttn->down_box(FL_ROUND_DOWN_BOX);
        pWire_buttn->callback((Fl_Callback*)SetWire, (void*)(pRenderingChange_group));
      } // Fl_Round_Button* pWire_buttn
      { pFlatSh_buttn = new Fl_Round_Button(1030, 45, 110, 15, "flat shader");
        pFlatSh_buttn->down_box(FL_ROUND_DOWN_BOX);
        pFlatSh_buttn->value(1);
        pFlatSh_buttn->callback((Fl_Callback*)SetFlatShading, (void*)(pRenderingChange_group));
      } // Fl_Round_Button* pFlatSh_buttn
      { pGouraudSh_buttn = new Fl_Round_Button(1030, 65, 130, 15, "Gouraud shader");
        pGouraudSh_buttn->down_box(FL_ROUND_DOWN_BOX);
        pGouraudSh_buttn->callback((Fl_Callback*)SetGouraudShading, (void*)(pRenderingChange_group));
      } // Fl_Round_Button* pGouraudSh_buttn
      { pPhongSh_buttn = new Fl_Round_Button(1030, 85, 120, 15, "Phong shader");
        pPhongSh_buttn->down_box(FL_ROUND_DOWN_BOX);
        pPhongSh_buttn->callback((Fl_Callback*)SetPhongShading, (void*)(pRenderingChange_group));
      } // Fl_Round_Button* pPhongSh_buttn
      { pVolume_buttn = new Fl_Round_Button(1030, 100, 64, 25, "volume");
        pVolume_buttn->down_box(FL_ROUND_DOWN_BOX);
        pVolume_buttn->deactivate();
      } // Fl_Round_Button* pVolume_buttn
      pRenderingChange_group->end();
    } // Fl_Group* pRenderingChange_group
    { pDisAtt_valScl = new Fl_Value_Slider(1208, 35, 180, 25, "distance attenuation");
      pDisAtt_valScl->type(5);
      pDisAtt_valScl->maximum(8);
      pDisAtt_valScl->step(0.02);
      pDisAtt_valScl->value(1);
      pDisAtt_valScl->callback((Fl_Callback*)ChangeDisAtt);
      pDisAtt_valScl->align(FL_ALIGN_TOP);
    } // Fl_Value_Slider* pDisAtt_valScl
    { pSmpNum_valScl = new Fl_Value_Slider(1208, 78, 180, 25, "sample number");
      pSmpNum_valScl->type(5);
      pSmpNum_valScl->minimum(500);
      pSmpNum_valScl->maximum(2000);
      pSmpNum_valScl->step(100);
      pSmpNum_valScl->value(500);
      pSmpNum_valScl->callback((Fl_Callback*)ChangeSmpNum);
      pSmpNum_valScl->align(FL_ALIGN_TOP);
    } // Fl_Value_Slider* pSmpNum_valScl
    { pBriScl_valScl = new Fl_Value_Slider(1208, 121, 180, 25, "bright scale");
      pBriScl_valScl->type(5);
      pBriScl_valScl->minimum(1);
      pBriScl_valScl->maximum(20);
      pBriScl_valScl->step(0.2);
      pBriScl_valScl->value(1);
      pBriScl_valScl->callback((Fl_Callback*)ChangeBriScl);
      pBriScl_valScl->align(FL_ALIGN_TOP);
    } // Fl_Value_Slider* pBriScl_valScl
    { pOpaScl_valScl = new Fl_Value_Slider(1208, 164, 180, 25, "opacity scale");
      pOpaScl_valScl->type(5);
      pOpaScl_valScl->maximum(0.5);
      pOpaScl_valScl->step(0.005);
      pOpaScl_valScl->value(0.2);
      pOpaScl_valScl->callback((Fl_Callback*)ChangeOpaScl);
      pOpaScl_valScl->align(FL_ALIGN_TOP);
    } // Fl_Value_Slider* pOpaScl_valScl
    { pSptMsk_group = new Fl_Group(1208, 209, 180, 70);
      pSptMsk_group->box(FL_DOWN_BOX);
      { pMskThrd_valScl = new Fl_Value_Slider(1213, 229, 170, 25, "mask threshold");
        pMskThrd_valScl->type(5);
        pMskThrd_valScl->value(0.5);
        pMskThrd_valScl->callback((Fl_Callback*)ChangeMskThrd);
        pMskThrd_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pMskThrd_valScl
      { pRelit_bttn = new Fl_Button(1213, 254, 170, 20, "re-lighting");
        pRelit_bttn->callback((Fl_Callback*)Relight);
      } // Fl_Button* pRelit_bttn
      pSptMsk_group->end();
    } // Fl_Group* pSptMsk_group
    { pAmip_group = new Fl_Group(1208, 297, 180, 75);
      pAmip_group->box(FL_DOWN_BOX);
      { pMIP_bttn = new Fl_Check_Button(1212, 302, 64, 15, "advanced MIP");
        pMIP_bttn->down_box(FL_DOWN_BOX);
        pMIP_bttn->callback((Fl_Callback*)SetMIP);
      } // Fl_Check_Button* pMIP_bttn
      { pOccScl_valScl = new Fl_Value_Slider(1213, 337, 170, 30, "occlusion attenuation");
        pOccScl_valScl->type(5);
        pOccScl_valScl->value(0.2);
        pOccScl_valScl->callback((Fl_Callback*)ChangeOccScl);
        pOccScl_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pOccScl_valScl
      pAmip_group->end();
    } // Fl_Group* pAmip_group
    { pXClip_group = new Fl_Group(1208, 394, 180, 69);
      pXClip_group->box(FL_DOWN_BOX);
      { pXClip_bttn = new Fl_Check_Button(1213, 394, 30, 25, "x clipping plane");
        pXClip_bttn->down_box(FL_DOWN_BOX);
        pXClip_bttn->callback((Fl_Callback*)SetXClipping);
      } // Fl_Check_Button* pXClip_bttn
      { pXFront_bttn = new Fl_Check_Button(1213, 414, 25, 25, "front clipping");
        pXFront_bttn->down_box(FL_DOWN_BOX);
        pXFront_bttn->callback((Fl_Callback*)SetXFront);
      } // Fl_Check_Button* pXFront_bttn
      { pXPlanel_valScl = new Fl_Value_Slider(1213, 436, 170, 25, "bright scale");
        pXPlanel_valScl->type(5);
        pXPlanel_valScl->labeltype(FL_NO_LABEL);
        pXPlanel_valScl->callback((Fl_Callback*)ChangeXPlane);
        pXPlanel_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pXPlanel_valScl
      pXClip_group->end();
    } // Fl_Group* pXClip_group
    { pYClip_group = new Fl_Group(1208, 464, 180, 70);
      pYClip_group->box(FL_DOWN_BOX);
      { pYClip_bttn = new Fl_Check_Button(1213, 464, 30, 25, "y clipping plane");
        pYClip_bttn->down_box(FL_DOWN_BOX);
        pYClip_bttn->callback((Fl_Callback*)SetYClipping);
      } // Fl_Check_Button* pYClip_bttn
      { pYFront_bttn = new Fl_Check_Button(1213, 484, 25, 25, "front clipping");
        pYFront_bttn->down_box(FL_DOWN_BOX);
        pYFront_bttn->callback((Fl_Callback*)SetYFront);
      } // Fl_Check_Button* pYFront_bttn
      { pYPlanel_valScl = new Fl_Value_Slider(1213, 507, 170, 25, "bright scale");
        pYPlanel_valScl->type(5);
        pYPlanel_valScl->labeltype(FL_NO_LABEL);
        pYPlanel_valScl->callback((Fl_Callback*)ChangeYPlane);
        pYPlanel_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pYPlanel_valScl
      pYClip_group->end();
    } // Fl_Group* pYClip_group
    { pZClip_group = new Fl_Group(1208, 537, 180, 72);
      pZClip_group->box(FL_DOWN_BOX);
      { pZClip_bttn = new Fl_Check_Button(1213, 537, 30, 25, "z clipping plane");
        pZClip_bttn->down_box(FL_DOWN_BOX);
        pZClip_bttn->callback((Fl_Callback*)SetZClipping);
      } // Fl_Check_Button* pZClip_bttn
      { pZFront_bttn = new Fl_Check_Button(1213, 557, 25, 25, "front clipping");
        pZFront_bttn->down_box(FL_DOWN_BOX);
        pZFront_bttn->callback((Fl_Callback*)SetZFront);
      } // Fl_Check_Button* pZFront_bttn
      { pZPlanel_valScl = new Fl_Value_Slider(1213, 581, 170, 25, "bright scale");
        pZPlanel_valScl->type(5);
        pZPlanel_valScl->labeltype(FL_NO_LABEL);
        pZPlanel_valScl->callback((Fl_Callback*)ChangeZPlane);
        pZPlanel_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pZPlanel_valScl
      pZClip_group->end();
    } // Fl_Group* pZClip_group
    { pStereo_bttn = new Fl_Button(1025, 299, 170, 25, "traditional stereo");
      pStereo_bttn->callback((Fl_Callback*)RunStereo);
    } // Fl_Button* pStereo_bttn
    { pXtereo_group = new Fl_Group(1025, 329, 170, 294);
      pXtereo_group->box(FL_DOWN_BOX);
      { pDivResult_bttn = new Fl_Check_Button(1028, 334, 112, 15, "division result");
        pDivResult_bttn->down_box(FL_DOWN_BOX);
        pDivResult_bttn->callback((Fl_Callback*)SetDivShow);
      } // Fl_Check_Button* pDivResult_bttn
      { pRndDist_bttn = new Fl_Check_Button(1028, 354, 147, 15, "random distribution");
        pRndDist_bttn->down_box(FL_DOWN_BOX);
        pRndDist_bttn->value(1);
        pRndDist_bttn->callback((Fl_Callback*)SetRandDis);
      } // Fl_Check_Button* pRndDist_bttn
      { pDivion_valScl = new Fl_Value_Slider(1030, 388, 160, 20, "divsion scale");
        pDivion_valScl->type(5);
        pDivion_valScl->minimum(1);
        pDivion_valScl->maximum(8);
        pDivion_valScl->step(0.1);
        pDivion_valScl->value(2);
        pDivion_valScl->textsize(14);
        pDivion_valScl->callback((Fl_Callback*)ChangeDivThrd);
        pDivion_valScl->align(FL_ALIGN_TOP);
      } // Fl_Value_Slider* pDivion_valScl
      { Fl_Group* o = new Fl_Group(1030, 418, 160, 51);
        o->box(FL_DOWN_BOX);
        { pLighting_bttn = new Fl_Check_Button(1032, 418, 88, 25, "key value");
          pLighting_bttn->down_box(FL_DOWN_BOX);
          pLighting_bttn->value(1);
          pLighting_bttn->callback((Fl_Callback*)SetBrightness);
        } // Fl_Check_Button* pLighting_bttn
        { pGamma_valScl = new Fl_Value_Slider(1034, 444, 151, 20, "gamma power");
          pGamma_valScl->type(5);
          pGamma_valScl->labeltype(FL_NO_LABEL);
          pGamma_valScl->minimum(0.1);
          pGamma_valScl->maximum(0.9);
          pGamma_valScl->step(0.05);
          pGamma_valScl->value(0.15);
          pGamma_valScl->textsize(14);
          pGamma_valScl->callback((Fl_Callback*)ChangeBrightness);
          pGamma_valScl->align(FL_ALIGN_TOP);
        } // Fl_Value_Slider* pGamma_valScl
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1030, 478, 165, 52);
        o->box(FL_DOWN_BOX);
        o->labeltype(FL_NO_LABEL);
        { pContour_bttn = new Fl_Check_Button(1033, 483, 117, 15, "gamma factor");
          pContour_bttn->down_box(FL_DOWN_BOX);
          pContour_bttn->value(1);
          pContour_bttn->callback((Fl_Callback*)SetContrast);
        } // Fl_Check_Button* pContour_bttn
        { pContour_valScl = new Fl_Value_Slider(1034, 505, 156, 20, "ratio");
          pContour_valScl->type(5);
          pContour_valScl->labeltype(FL_NO_LABEL);
          pContour_valScl->minimum(0.5);
          pContour_valScl->maximum(2.5);
          pContour_valScl->step(0.1);
          pContour_valScl->value(1.5);
          pContour_valScl->textsize(14);
          pContour_valScl->callback((Fl_Callback*)ChangeContrast);
          pContour_valScl->align(FL_ALIGN_TOP);
        } // Fl_Value_Slider* pContour_valScl
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1030, 540, 165, 52);
        o->box(FL_DOWN_BOX);
        o->labeltype(FL_NO_LABEL);
        { pDim_bttn = new Fl_Check_Button(1033, 545, 117, 15, "dimming factor");
          pDim_bttn->down_box(FL_DOWN_BOX);
          pDim_bttn->value(1);
          pDim_bttn->callback((Fl_Callback*)SetDim);
        } // Fl_Check_Button* pDim_bttn
        { pDim_valScl = new Fl_Value_Slider(1034, 567, 156, 20, "ratio");
          pDim_valScl->type(5);
          pDim_valScl->labeltype(FL_NO_LABEL);
          pDim_valScl->minimum(0.1);
          pDim_valScl->maximum(0.5);
          pDim_valScl->step(0.05);
          pDim_valScl->value(0.3);
          pDim_valScl->textsize(14);
          pDim_valScl->callback((Fl_Callback*)ChangeDim);
          pDim_valScl->align(FL_ALIGN_TOP);
        } // Fl_Value_Slider* pDim_valScl
        o->end();
      } // Fl_Group* o
      { pStFusion_bttn = new Fl_Button(1030, 601, 160, 20, "Xtereo");
        pStFusion_bttn->callback((Fl_Callback*)RunStFusion);
      } // Fl_Button* pStFusion_bttn
      pXtereo_group->end();
    } // Fl_Group* pXtereo_group
    { pFps_buttn = new Fl_Check_Button(1025, 265, 110, 15, "fps");
      pFps_buttn->down_box(FL_DOWN_BOX);
      pFps_buttn->callback((Fl_Callback*)CountFps);
    } // Fl_Check_Button* pFps_buttn
    pMain_win->end();
  } // Fl_Double_Window* pMain_win
  static Fl_Menu_Item aMainItem[] = 
{
    {"file", 0, 0, 0, FL_SUBMENU},
        {"load model", 0, LoadModel, pRenderingChange_group},
        {0},
    {"reload TF", 0, ReloadTF},
    {0},
};
pMain_menu->menu(aMainItem);
  return pMain_win;
}
